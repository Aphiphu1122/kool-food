import { NextResponse } from "next/server";
import { connectMongoDB } from "../../../../../lib/mongodb";
import Booking from "../../../../../models/Booking";
import jwt from "jsonwebtoken";

const SECRET_KEY = process.env.JWT_SECRET || "your_secret_key";

export async function GET(req) {
  try {
    const token = req.cookies.get("token")?.value;

    if (!token) {
      return NextResponse.json({ success: false, message: "‚õî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 401 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á email ‡∏Ç‡∏≠‡∏á User
    const decoded = jwt.verify(token, SECRET_KEY);
    const userEmail = decoded.email;

    await connectMongoDB();
    
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á User
    const latestBooking = await Booking.findOne({ email: userEmail }).sort({ createdAt: -1 });

    if (!latestBooking) {
      return NextResponse.json({ success: false, message: "‚õî ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" }, { status: 404 });
    }

    return NextResponse.json({ success: true, booking: latestBooking }, { status: 200 });

  } catch (error) {
    console.error("üî• Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á User:", error);
    return NextResponse.json({ success: false, message: "‚õî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}
