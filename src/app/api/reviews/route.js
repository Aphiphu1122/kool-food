import { NextResponse } from "next/server";
import { connectMongoDB } from "../../../../lib/mongodb";
import Reviews from "../../../../models/Reviews";
import User from "../../../../models/user";
import jwt from "jsonwebtoken";

const SECRET_KEY = process.env.JWT_SECRET || "your_secret_key";

// üîπ ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GET() {
  try {
    await connectMongoDB();
    const reviews = await Reviews.find().sort({ createdAt: -1 });

    return NextResponse.json({ success: true, reviews }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Failed to fetch reviews:", error);
    return NextResponse.json({ success: false, error: "‚ùå Failed to fetch reviews" }, { status: 500 });
  }
}

// üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
export async function POST(req) {
  try {
    await connectMongoDB();

    console.log("üîç Checking token...");
    const token = req.cookies.get("token")?.value;

    if (!token) {
      console.warn("‚ö†Ô∏è No token provided");
      return NextResponse.json({ success: false, error: "Unauthorized: No token provided" }, { status: 401 });
    }

    console.log("‚úÖ Token found, verifying...");
    let decoded;
    try {
      decoded = jwt.verify(token, SECRET_KEY);
      console.log("‚úÖ Token verified:", decoded);
    } catch (error) {
      console.error("‚ùå Invalid token:", error.message);
      return NextResponse.json({ success: false, error: "Invalid or expired token" }, { status: 401 });
    }

    console.log("üîé Fetching user from MongoDB...");
    const user = await User.findById(decoded.id).select("name");
    if (!user) {
      console.warn("‚ö†Ô∏è User not found in database:", decoded.id);
      return NextResponse.json({ success: false, error: "User not found" }, { status: 404 });
    }

    const { comment, rating } = await req.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    if (!comment || typeof rating !== "number") {
      return NextResponse.json({ success: false, error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" }, { status: 400 });
    }

    console.log("‚úçÔ∏è Creating new review...");
    const newReview = new Reviews({
      user: user.name, // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å MongoDB
      comment,
      rating,
      createdAt: new Date(), // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
    });

    await newReview.save();
    console.log("‚úÖ Review saved successfully:", newReview);

    return NextResponse.json({ success: true, message: "‚úÖ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", review: newReview }, { status: 201 });

  } catch (error) {
    console.error("‚ùå Failed to create review:", error);
    return NextResponse.json({ success: false, error: "‚ùå Failed to create review" }, { status: 500 });
  }
}
